<?php if (!defined('BASEPATH')) exit('No direct script access allowed');/** * Modelo de toda la APlicacion Regsitro  */class Registro_model extends CI_Model {    function __construct() {        parent::__construct();    }    /**     * Inserta lod patcipantes     *      */    public function guarda_participante($datos, $id_tipo, $precio, $evento) {                $this->db->trans_start();                // Guardar datos principales        $participante_id = $this->guardar_tabla_participantes($datos, $id_tipo, $precio);                //Asignarle conferencia        if($evento->multi_conferencia === TRUE){            foreach ($datos['datos_paso2a'] as $value) {                $this->guardar_tabla_paticipantes_conf($value, $participante_id);            }        }                        //Guardar Datos facturacion        if($precio != 0 && $evento->cobro === TRUE && $datos['datos_paso3']['factura'] === '1'){            $this->guardar_tabla_paticipantes_fact($participante_id, $datos['datos_paso3']);        }                        //Grabar codigo Generado        $codigo = $this->codigo_barras($participante_id);                $this->db->trans_complete();                if ($this->db->trans_status() === FALSE)        {            return FALSE;        }else{            return $codigo;        }     }    //--------------------------------------------------------------------------    /**     * Datos Generales de la tabla     * Participntes     */    public function guardar_tabla_participantes($datos, $id_tipo, $precio) {                if(isset($datos['datos_paso2']['nombre'])){            $this->db->set('nombre',$datos['datos_paso2']['nombre']);        }        if(isset($datos['datos_paso2']['apellido_pa'])){            $this->db->set('apellido_pat', $datos['datos_paso2']['apellido_pa']);        }        if(isset($datos['datos_paso2']['apellido_ma'])){            $this->db->set('apellido_mat', $datos['datos_paso2']['apellido_ma']);        }        if(isset($datos['datos_paso2']['cargo'])){            $this->db->set('cargo', $datos['datos_paso2']['cargo']);        }        if(isset($datos['datos_paso2']['empresa'])){            $this->db->set('empresa', $datos['datos_paso2']['empresa']);        }        if(isset($datos['datos_paso2']['direccion'])){            $this->db->set('direccion', $datos['datos_paso2']['direccion']);        }        if(isset($datos['datos_paso2']['colonia'])){            $this->db->set('colonia', $datos['datos_paso2']['colonia']);        }        if(isset($datos['datos_paso2']['ciudad'])){            $this->db->set('ciudad', $datos['datos_paso2']['ciudad']);        }        if(isset($datos['datos_paso2']['id_estado'])){            $this->db->set('id_estado', $datos['datos_paso2']['id_estado']);        }        if(isset($datos['datos_paso2']['otro_estado'])){            $this->db->set('estado_otro', $datos['datos_paso2']['otro_estado']);        }        if(isset($datos['datos_paso2']['codigo_postal'])){            $this->db->set('codigo_postal', $datos['datos_paso2']['codigo_postal']);        }        if(isset($datos['datos_paso2']['id_pais'])){            $this->db->set('id_pais', $datos['datos_paso2']['id_pais']);        }        if(isset($datos['datos_paso2']['telefono_lada'])){            $this->db->set('telefono_lada', $datos['datos_paso2']['telefono_lada']);        }        if(isset($datos['datos_paso2']['telefono'])){            $this->db->set('telefono', $datos['datos_paso2']['telefono']);        }        if(isset($datos['datos_paso2']['telefono2'])){            $this->db->set('telefono_otro', $datos['datos_paso2']['telefono2']);        }        if(isset($datos['datos_paso2']['fax'])){            $this->db->set('fax', $datos['datos_paso2']['fax']);        }        if(isset($datos['datos_paso2']['correo'])){            $this->db->set('email', $datos['datos_paso2']['correo']);        }        if(isset($datos['datos_paso2']['id_anfitrion'])){            $this->db->set('id_anfitrion', $datos['datos_paso2']['id_anfitrion']);        }        if(isset($datos['datos_paso2']['reconocimiento'])){            $this->db->set('nombre_reco', $datos['datos_paso2']['reconocimiento']);        }        /**         * Datos de Configuracion Dentro de General         */        $this->db->set('id_tipo', $id_tipo);                if(isset($datos['datos_paso2']['id_estatus'])){            $this->db->set('id_estatus', $datos['datos_paso2']['id_estatus']);        }else{            $this->db->set('id_estatus', 1);        }                        if(isset($datos['datos_paso3']['pago'])){            $this->db->set('id_forma_pago', $datos['datos_paso3']['pago']);        }        if(isset($datos['datos_paso3']['factura'])){            $this->db->set('factura', $datos['datos_paso3']['factura']);        }                //Asistencia se Guarda cuando es escaneado                if(isset($datos['datos_paso1']['codigo_usado'])){            $this->db->set('codigo_usado', $datos['datos_paso1']['codigo_usado']);        }        $this->db->set('precio_pagado', $precio);        //Codigo de Barras se guarda depues de generarze el Id        $this->db->insert('participantes');                 return $this->db->insert_id();    }     //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function guardar_tabla_paticipantes_conf($id_conf, $id_part) {        $this->db->set('id_conferencia', $id_conf);        $this->db->set('id_participante', $id_part);        $this->db->insert('paticipantes_conferencias');     }    //--------------------------------------------------------------------------    /**     * Guarda los datos de la facturacion     *      */    public function guardar_tabla_paticipantes_fact($id_participante, $datos) {        $this->db->set('id_participante', $id_participante);        $this->db->set('razon_social', $datos['razon_social']);        $this->db->set('direccion_fiscal', $datos['direccion']);        $this->db->set('colonia', $datos['colonia']);        $this->db->set('ciudad', $datos['ciudad']);        $this->db->set('id_estado', $datos['id_estado']);        $this->db->set('codigo_postal', $datos['codigo_postal']);        $this->db->set('rfc', $datos['rfc']);        $this->db->insert('participantes_factura');     }    //--------------------------------------------------------------------------        /**     * Inserta lod patcipantes     *      */    public function editar_participante_general($id) {                $data = array();        $this->db->trans_start();                if($this->input->post('nombre')){            $data['nombre'] = $this->input->post('nombre');        }        if($this->input->post('apellido_pa')){            $data['apellido_pat'] = $this->input->post('apellido_pa');        }        if($this->input->post('apellido_ma')){            $data['apellido_mat'] = $this->input->post('apellido_ma');        }        if($this->input->post('cargo')){            $data['cargo'] = $this->input->post('cargo');        }        if($this->input->post('empresa')){            $data['empresa'] = $this->input->post('empresa');        }        if($this->input->post('direccion')){            $data['direccion'] = $this->input->post('direccion');        }        if($this->input->post('colonia')){            $data['colonia'] = $this->input->post('colonia');        }        if($this->input->post('ciudad')){            $data['ciudad'] = $this->input->post('ciudad');        }        if($this->input->post('id_pais')){            $data['id_pais'] = $this->input->post('id_pais');        }        if($this->input->post('id_estado')){           $data['id_estado'] = $this->input->post('id_estado');        }        if($this->input->post('otro_estado')){            $data['estado_otro'] = $this->input->post('otro_estado');        }        if($this->input->post('codigo_postal')){            $data['codigo_postal'] = $this->input->post('codigo_postal');        }        if($this->input->post('telefono_lada')){            $data['telefono_lada'] = $this->input->post('telefono_lada');        }        if($this->input->post('telefono')){            $data['telefono'] = $this->input->post('telefono');        }        if($this->input->post('telefono2')){            $data['telefono_otro'] = $this->input->post('telefono2');        }        if($this->input->post('fax')){            $data['fax'] = $this->input->post('fax');        }        if($this->input->post('correo')){            $data['email'] = $this->input->post('correo');        }        if($this->input->post('id_anfitrion')){            $data['id_anfitrion'] = $this->input->post('id_anfitrion');        }        if($this->input->post('reconocimiento')){            $data['nombre_reco'] = $this->input->post('reconocimiento');        }                $this->db->where('id_participante', $id);        $this->db->update('participantes', $data);                $this->db->trans_complete();                if ($this->db->trans_status() === FALSE)        {            return FALSE;        }else{            return TRUE;        }     }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function editar_participante_confere($id) {        $this->db->trans_start();                $this->db->where('id_participante', $id);        $this->db->delete('paticipantes_conferencias');                $data = array();        foreach ($this->input->post(NULL,TRUE) as $value) {              $data[] = array (                          'id_conferencia' => $value,                           'id_participante' => $id                        );        }        $this->db->insert_batch('paticipantes_conferencias', $data);                        $this->db->trans_complete();                if ($this->db->trans_status() === FALSE)        {            return FALSE;        }else{            return TRUE;        }                 }    //--------------------------------------------------------------------------    /**     * Guarda los cambios al Editar desde el admisnitrador a un particpantye     *      */    public function editar_participante_pago($id) {                $data = array();        $this->db->trans_start();            // Modifica tablla participantes        $data['factura'] = $this->input->post('factura');        $data['id_forma_pago'] = $this->input->post('pago');                $this->db->where('id_participante', $id);        $this->db->update('participantes', $data);        //Modifica tabla participantes_factura        $this->db->where('id_participante', $id);        $this->db->delete('participantes_factura');               if($this->input->post('factura') === '1'){                        $this->db->set('id_participante', $id);            $this->db->set('razon_social', $this->input->post('razon_social'));            $this->db->set('direccion_fiscal', $this->input->post('direccion'));            $this->db->set('colonia', $this->input->post('colonia'));            $this->db->set('ciudad', $this->input->post('ciudad'));            $this->db->set('id_estado', $this->input->post('id_estado'));            $this->db->set('codigo_postal', $this->input->post('codigo_postal'));            $this->db->set('rfc', $this->input->post('rfc'));            $this->db->insert('participantes_factura');         }                      $this->db->trans_complete();                if ($this->db->trans_status() === FALSE)        {            return FALSE;        }else{            return TRUE;        }                 }    //--------------------------------------------------------------------------    /**     * Guarda los cambios al Editar solo es estatus     *      */    public function editar_participante_estatus($id, $id_esta) {                $data = array(               'id_estatus' => $id_esta            );        $this->db->where('id_participante', $id);        return $this->db->update('participantes', $data);                }    //--------------------------------------------------------------------------        /**     * Regresa un objeto de la configuracion del evento     *      */    public function config_conference() {        $config = array();        $value = NULL;                $selected_columns = array(            'id_configura',            'nombre',            'valor',            'tipo'        );        $this->db->select($selected_columns);        $this->db->from('configura_evento');        $query = $this->db->get();                foreach ($query->result() as $row) {            switch ($row->tipo) {                case 'string': $value = (string) $row->valor; break;                case 'bool': $value = (bool) $row->valor; break;                default: $value = $row->valor; break;            }            $config[$row->nombre] = $value;        }                return (object) $config;    }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function pre_registro($codigo = FALSE, $usado = FALSE) {        $selected_columns = array(            'id_pre_registro',            'nombre',            'apellido_pat',            'apellido_mat',            'cargo',            'empresa',            'direccion',            'colonia',            'ciudad',            'id_estado',            'estado_otro',            'codigo_postal',            'id_pais',            'telefono_lada',            'telefono',            'telefono_otro',            'fax',            'email',            'id_anfitrion',            'nombre_reco',            'codigo_personal',            'precio_personal',            'usado',            'fecha_creacion'        );        $this->db->select($selected_columns);        $this->db->from('pre_registro');        if ($codigo !== FALSE) {            $this->db->where('codigo_personal', $codigo);        }        if ($usado !== FALSE) {            $this->db->where('usado', $usado);        }                $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa listado de Paises     *      */    public function cupon_info($cupon) {         $selected_columns = array(            'cupon',        );        $this->db->select($selected_columns);        $this->db->select_sum('repeticiones');        $this->db->select_max('precio_cupon');        $this->db->from('cupones');        $this->db->where('cupon', $cupon);                $query = $this->db->get();        if ($query->num_rows() >= 1) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa cuntav vese se ha usado un cupon     *      */    public function cupon_usados($cupon) {        $this->db->where('codigo_usado', $cupon);        $this->db->from('participantes');        $total = $this->db->count_all_results();        if ( $total >= 0) {            return  $total;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los infromacion par agenerar la tabla de partcipantes     *      */    public function info_participantes($id_participante) {        $selected_columns = array(            'id_participante',            'nombre',            'apellido_pat AS apellido_pa',            'apellido_mat AS apellido_ma',            'nombre_anfitrion',            'cargo',            'empresa',            'direccion',            'colonia',            'ciudad',            'id_estado AS id_estado',            'estado_otro AS otro_estado',            'codigo_postal',            'id_pais',            'telefono_lada',            'telefono',            'telefono_otro AS telefono2',            'fax',            'email AS correo',            'participantes.id_anfitrion',            'participantes.id_tipo',            'nombre_reco AS reconocimiento',            'participantes.id_estatus',            'factura',            'codigo_usado',            'precio_pagado',            'codigo_barras',            'fecha_creacion',            'nombre_tipo',            'nombre_estatus',        );        $this->db->select($selected_columns);        $this->db->from('participantes');        $this->db->join('anfitriones', 'anfitriones.id_anfitrion = participantes.id_anfitrion', 'left');        $this->db->join('tipo_participantes', 'tipo_participantes.id_tipo = participantes.id_tipo', 'left');        $this->db->join('estatus', 'estatus.id_estatus = participantes.id_estatus', 'left');        $this->db->where('id_participante', $id_participante);        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function info_participantes_conf($id) {        $selected_columns = array(            'id_conferencia',            'asiento'        );        $this->db->select($selected_columns);        $this->db->from('paticipantes_conferencias');        $this->db->where('id_participante', $id);        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;                }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function info_participantes_pago($id) {        $selected_columns = array(            'participantes.id_participante',            'id_forma_pago AS pago',            'factura',            'participantes_factura.razon_social',            'participantes_factura.direccion_fiscal AS direccion',            'participantes_factura.colonia',            'participantes_factura.ciudad',            'participantes_factura.id_estado',            'participantes_factura.codigo_postal',            'participantes_factura.rfc',        );        $this->db->select($selected_columns);        $this->db->from('participantes');        $this->db->join('participantes_factura', 'participantes_factura.id_participante = participantes.id_participante', 'left');        $this->db->where('participantes.id_participante', $id);        $query = $this->db->get();//        $this->db->last_query();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los infromacion para generar la tabla de partcipantes     *      */    public function participantes_lista($buscar = FALSE, $id_anfitrion = FALSE, $id_tipo = FALSE, $id_estatus = FALSE, $codigo_barras = FALSE) {        $selected_columns = array(            'id_participante',            'nombre',            'apellido_pat',//            'apellido_mat',            'nombre_anfitrion',//            'cargo',//            'empresa',//            'direccion',//            'colonia',//            'ciudad',//            'id_estado',//            'estado_otro',//            'codigo_postal',//            'id_pais',//            'telefono_lada',//            'telefono',//            'telefono_otro',//            'fax',            'email',//            'nombre_reco',            'factura',            'asistencia',//            'codigo_usado',            'precio_pagado',            'codigo_barras',            'fecha_creacion',            'nombre_tipo',            'nombre_estatus'        );        $this->db->select($selected_columns);        $this->db->from('participantes');        $this->db->join('anfitriones', 'anfitriones.id_anfitrion = participantes.id_anfitrion', 'left');        $this->db->join('tipo_participantes', 'tipo_participantes.id_tipo = participantes.id_tipo', 'left');        $this->db->join('estatus', 'estatus.id_estatus = participantes.id_estatus', 'left');        $this->db->order_by("fecha_creacion", "desc");                 if ($buscar) {            $this->db->like('participantes.nombre', $buscar);            $this->db->or_like('participantes.apellido_pat', $buscar);	    $this->db->or_like('codigo_barras', $buscar);        }        if ($id_anfitrion) {            $this->db->where('participantes.id_anfitrion', $id_anfitrion);        }        if ($id_tipo) {            $this->db->where('participantes.id_tipo', $id_tipo);        }        if ($id_estatus) {            $this->db->where('participantes.id_estatus', $id_estatus);        }        if ($codigo_barras) {            $this->db->or_like('participantes.codigo_barras', $codigo_barras);        }                $query = $this->db->get();//        echo $this->db->last_query();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Eliminar un particimante ya se apor id o por codigo de referncia devido      * un pago cancelado     *      */    function participantes_eliminar($id = FALSE, $referencia = FALSE) {        if ($id) {            $this->db->where('id_participante', $id);        }        if ($referencia) {            $this->db->where('codigo_barras', $referencia);        }        return $this->db->delete('participantes');    }            /**     * Regresa los infromacion para cupones grupos     *      */    public function cupones_gpo_info($buscar = FALSE, $id = FALSE) {        $selected_columns = array(            'id_cupones_gpo',            'nombre_cupones_gpo'        );        $this->db->select($selected_columns);        $this->db->from('cupones_gpo');        $this->db->order_by("id_cupones_gpo", "desc");                 if ($buscar) {            $this->db->like('nombre_cupones_gpo', $buscar);        }                if ($id) {            $this->db->where('id_cupones_gpo', $id);        }                $query = $this->db->get();//        echo $this->db->last_query();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los infromacion de cupones por grupo de cupon     *      */    public function cupon_cupones_lista($cupongpo) {        $selected_columns = array(            'id_cupon',            'cupon',            'precio_cupon',            'repeticiones'        );        $this->db->select($selected_columns);        $this->db->from('cupones');        $this->db->order_by("id_cupon", "desc");         $this->db->where('id_cupones_gpo', $cupongpo);                $query = $this->db->get();//        echo $this->db->last_query();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Regresa los infromacion para generar la tabla de partcipantes     *      */    public function cupon_cupones_insertar($grupo, $codigo = false, $numero = false, $precio = 0, $repeticiones = 1) {       $data = array();        if($codigo){           $data[] = array(                'cupon' => $codigo,                'id_cupones_gpo' => $grupo,                'precio_cupon' => $precio,                'repeticiones' => $repeticiones           );        }         if ($numero) {            for ($i=0; $i<=$numero; $i++) {               $x = rand($i+1,$i+100).$i;               $data[] = array(                    'cupon' => $this->algoritmo_cupones($x),                    'id_cupones_gpo' => $grupo,                    'precio_cupon' => $precio,                    'repeticiones' => $repeticiones               );            }         }        return $this->db->insert_batch('cupones', $data);    }    //--------------------------------------------------------------------------    /**     * Regresa los infromacion para generar la tabla de partcipantes     *      */    public function cupones_gpo_nuevo($nombre) {        $this->db->set('nombre_cupones_gpo', $nombre);        $this->db->insert('cupones_gpo');         return $this->db->insert_id();    }    //--------------------------------------------------------------------------        /**     * Eliminar un grupo de cupones y todo su contendio     *      */    public function cupones_gpo_eliminar($id) {        $this->db->where('id_cupones_gpo', $id);        return $this->db->delete('cupones_gpo');    }    //--------------------------------------------------------------------------        /**     * Eliminar un grupo de cupones y todo su contendio     *      */    public function cupones_gpo_editar($id, $nombre) {        $data = array(               'nombre_cupones_gpo' => $nombre            );        $this->db->where('id_cupones_gpo', $id);        return $this->db->update('cupones_gpo', $data);    }    //--------------------------------------------------------------------------    /**     * Esta funcion actualiza a 1 para que el preregistro ya no s epueda  usar     *      */    public function pre_registro_usado($codigo){                $data = array(            'usado' => 1        );        $this->db->where('codigo_personal', $codigo);        $this->db->update('pre_registro',$data);    }    //--------------------------------------------------------------------------        /**     * Guardar Codigo de Barras     *      */    public function codigo_barras($id){        $codigo = $this->algoritmo_barras($id);                $data = array(            'codigo_barras' => $codigo        );        $this->db->where('id_participante', $id);        $this->db->update('participantes',$data);        return $codigo;    }    //--------------------------------------------------------------------------        /**     * Activa cudno alguein ha asistido     *      */    public function asistencia($id){                $data = array(            'asistencia' => 1        );        $this->db->where('id_participante', $id);        $result = $this->db->update('participantes',$data);                if ($result) {            return TRUE;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function conferencias($id_conferencia = FALSE) {        $selected_columns = array(            'id_conferencia',            'nombre_confe',            'nombre_salon',            'conferencista',            'capacidad',            'hora_inicio'        );        $this->db->select($selected_columns);        $this->db->from('conferencias');        if ($id_conferencia) {            $this->db->where('id_conferencia', $id_tipo);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function conferencias_participante($id_participante) {        $selected_columns = array(            'paticipantes_conferencias.id_conferencia',            'nombre_confe',            'nombre_salon',            'conferencista',            'hora_inicio'        );                $this->db->select($selected_columns);        $this->db->from('paticipantes_conferencias');        $this->db->join('conferencias', 'conferencias.id_conferencia = paticipantes_conferencias.id_conferencia');        $this->db->where('id_participante', $id_participante);        $this->db->order_by('hora_inicio', 'ASC');                $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa scuntso se an inscrito a las conferencias     *      */    public function conferencias_inscritos(){                $query = $this->db->query('SELECT id_conferencia, COUNT( id_conferencia) as capacidad FROM `paticipantes_conferencias` group by id_conferencia');        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresaa cuntos asistieron a una conferencia ya Final     *      */    public function conferencias_asistencia(){                //$query = $this->db->query('SELECT id_conferencia, COUNT( id_conferencia) as capacidad FROM `paticipantes_conferencias` group by id_conferencia');        $selected_columns = array(            'conferencias.id_conferencia',            'SUM(`participantes`.`asistencia` = 1) AS `asistencia`',            'COUNT(*) AS `inscritos`',            'capacidad'        );                $this->db->select($selected_columns);        $this->db->from('paticipantes_conferencias');        $this->db->join('participantes ', 'participantes.id_participante = paticipantes_conferencias.id_participante');        $this->db->join('conferencias ', 'conferencias.id_conferencia = paticipantes_conferencias.id_conferencia');        $this->db->group_by('conferencias.id_conferencia');                $query = $this->db->get();                        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Reporte de participantes     *      */    public function repo_participacion() {        $selected_columns = array(            'id_participante',            'nombre',            'apellido_pat',//            'apellido_mat',            'nombre_anfitrion',//            'cargo',            'empresa',            'direccion',//            'colonia',//            'ciudad',//            'id_estado',//            'estado_otro',//            'codigo_postal',//            'id_pais',//            'telefono_lada',            'telefono',//            'telefono_otro',//            'fax',            'email',//            'nombre_reco',//            'factura',            'asistencia',//            'codigo_usado',            'fecha_creacion',            'nombre_tipo',            'nombre_estatus',        );        $this->db->select($selected_columns);        $this->db->from('participantes');        $this->db->join('anfitriones', 'anfitriones.id_anfitrion = participantes.id_anfitrion', 'inner');        $this->db->join('tipo_participantes', 'tipo_participantes.id_tipo = participantes.id_tipo');        $this->db->join('estatus', 'estatus.id_estatus = participantes.id_estatus');                $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa los defentes tipos de partipantes     *      */    public function tipo_participantes($id_tipo = FALSE, $especial = FALSE) {        $selected_columns = array(            'id_tipo',            'nombre_tipo',            'precio'        );        $this->db->select($selected_columns);        $this->db->from('tipo_participantes');        if ($id_tipo) {            $this->db->where('id_tipo', $id_tipo);        }        if ($especial !== FALSE) {            $this->db->where('especial', $especial);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Carga el select de aNfritiones     *      */    public function anfitriones($id_anfitrion = FALSE, $especial = NULL) {        $selected_columns = array(            'id_anfitrion',            'nombre_anfitrion'        );        $this->db->select($selected_columns);        $this->db->from('anfitriones');        if ($id_anfitrion) {            $this->db->where('id_anfitrion', $id_anfitrion);        }        if ($especial !== NULL) {            $this->db->where('especial', $especial);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Todod los estatus     *      */    public function estatus($id_estatus = FALSE) {        $selected_columns = array(            'id_estatus',             'nombre_estatus'        );        $this->db->select($selected_columns);        $this->db->from('estatus');        if ($id_estatus) {            $this->db->where('id_estatus', $id_estatus);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Regresa los estados de la Republica     *      */    public function estados($id_estado = FALSE) {        $selected_columns = array(            'id_estado',            'nombre_estado'        );        $this->db->select($selected_columns);        $this->db->from('estados');        if ($id_estado) {            $this->db->where('id_estado', $id_estado);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa listado de Paises     *      */    public function paises($id_pais = FALSE) {        $selected_columns = array(            'id_pais',            'nombre_pais'        );        $this->db->select($selected_columns);        $this->db->from('paises');        if ($id_pais) {            $this->db->where('id_pais', $id_pais);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Mensajes     *      */    public function mensajes($id_mensaje = FALSE) {        $selected_columns = array(            'id_mensaje',            'nombre_mensaje',            'texto_mensaje'        );        $this->db->select($selected_columns);        $this->db->from('mensajes');        if ($id_mensaje) {            $this->db->where('id_mensaje', $id_mensaje);        }        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------    /**     * Regresa listado de Paises     *      */    public function campos() {        $selected_columns = array(            'id_campo',            'nombre',            'etiqueta',            'visible',            'requerido'        );        $this->db->select($selected_columns);        $this->db->from('campos');        $query = $this->db->get();        if ($query) {            return $query;        }        return FALSE;    }    //--------------------------------------------------------------------------        /**     * Algoritmo del Codigo de Barras     */    public function algoritmo_barras($id) {        $var = strtoupper (substr( base_convert(microtime(TRUE), 10, 36),-5));        $id = str_pad(substr($id, -5), 5, $var, STR_PAD_LEFT);        return $id;    }    //--------------------------------------------------------------------------        /**     * Algoritmo del Codigo de Barras     */    public function algoritmo_cupones($id) {        $var = strtoupper (substr( base_convert(microtime(TRUE)+$id, 10, 36),-5));        $id = str_pad(substr($id, 6), 6, $var, STR_PAD_LEFT);        return $id;    }}// END Registro_model MODEL/* End of file Registro_model.php */
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');/** * Start * Call all statics pages */class Administracion extends MY_Controller {        function __construct() {        parent::__construct();        // Force encrypted connection        $this->police->force_ssl();        $this->load->model('Registro_model');        $this->load->library('form_validation');        //la variable evento se carga con todo la configuracion        $this->evento = $data['evento'] = $this->Registro_model->configura_evento();                        // Control police start permission and authentication        $data['documents'] = $this->police->police_control();        $this->load->vars($data);    }    //--------------------------------------------------------------------------    /**     * Zona Privada     *      */    function index() {        $this->participantes();    }    //--------------------------------------------------------------------------    /**     * Zona Privada     *      */    function participantes() {        // Para que form_validator pueda validar el Get        $_POST = $_GET;        		$this->form_validation->set_rules('buscar', 'Buscar', '');		$this->form_validation->set_rules('id_esta', 'Estatus', '');		$this->form_validation->set_rules('id_tipo', 'Tipo', '');		$this->form_validation->set_rules('id_anfi', 'Anfitrion', '');                        $this->form_validation->run();                $data['selec_anfitriones'] = $this->Registro_model->anfitriones();        $data['estatus'] = $this->Registro_model->estatus();        $data['tipo_participantes'] = $this->Registro_model->tipo_participantes();        $data['jscript'] = array ('js/participantes.js');                $data['part'] = 'active';        $data['main_content'] = 'administracion/participantes';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------    /**     * LLEnado de la tabla para participantes o index     */    function participantes_tabla(){      if($this->input->is_ajax_request()){          //          $pagina = $this->input->post('pagina');//          $porPagina = $this->input->post('porPagina');//          $inicio = ($pagina*$porPagina)-$porPagina;          $buscar = $this->input->post('buscar');          $id_anfitrion = $this->input->post('id_anfi');          $id_tipo = $this->input->post('id_tipo');          $id_estatus = $this->input->post('id_esta');                    $data['contar'] = 0;          $data['tabla'] = $this->Registro_model->participantes_lista($buscar, $id_anfitrion,$id_tipo,$id_estatus);            $this->load->view('administracion/ajax/participantes_tabla', $data);      } else {          redirect('registro');      }    }    //--------------------------------------------------------------------------      /**     * Edicion de la configuracion general del sistema      */    function participante_sistema($id){        /*         * Cambiar el precio // v2.0         * Cambiar tipo de usuario // v2.0         * enviar correos si         * cambiar estatus si         * enviar coorreo personalisado          */        $data['id'] = $id;        $datos = $this->Registro_model->info_participantes($id);  		$this->form_validation->set_rules('id_esta', 'Estatus', 'required');                if ($this->form_validation->run() == FALSE) {            $arr = array ("id"=>$id);            $data['js_datos'] = json_encode($arr);             $data['estatus'] = $this->Registro_model->estatus();            $data['estatus_par'] = $datos->row()->id_estatus;            $data['main_content'] = 'administracion/ajax/participante_sistema';                        $data['jscript'] = array ('js/participante_sistema.js');            $this->load->view(config_item('template') . 'main', $data);        } else {            $id_esta = $this->input->post('id_esta');            $var = $this->Registro_model->editar_participante_estatus($id, $id_esta);              if($var){                redirect('administracion/participantes');            } else {                echo 'Fatal Error';            }                    }              }    //--------------------------------------------------------------------------          /**     * Envia el correo al participante al aver pagado     */    function participante_correo_pagado(){        if($this->input->is_ajax_request()){            $id = $this->input->post('id');            //info participante            $datos = $this->Registro_model->info_participantes($id);             $correo = $datos->row()->correo;            $nombre_completo = $datos->row()->nombre.' '.$datos->row()->apellido_pa.' '.$datos->row()->apellido_ma;            $codigo_refe = $datos->row()->codigo_barras;            $precio_cero = true;            //info mensaje de exito            $query = $this->Registro_model->mensajes();            $row = $query->row_array(1); //El mensaje de confirmacion es numero 2            $mensaje_correo = nl2br($row['texto_mensaje']);            //info conferencias            $datos_conferencia = $this->Registro_model->info_participantes_conf($id);            $confe_selec = array();            foreach ($datos_conferencia->result() as $row){                $confe_selec[] = $row->id_conferencia;            }                     $respuesta = $this->resgitro_library->enviar_registro($correo, $nombre_completo, $codigo_refe, $mensaje_correo, $precio_cero, $confe_selec);                        $data['mensaje'] = 'Problemas el enviar el correo reintente más tarde';            if($respuesta === true){                $data['mensaje'] = 'Correo enviado correctamente';            }            echo json_encode($data);                    } else {          redirect('registro');        }    }    //--------------------------------------------------------------------------      /**     * Envia el correo al participante al aver pagado     */    function participante_correo_contactar(){        if($this->input->is_ajax_request()){            $data = array();            $id = $this->input->post('id');            $mensaje = $this->input->post('mensaje');                        //info participante            $datos = $this->Registro_model->info_participantes($id);             $correo = $datos->row()->correo;            $nombre_completo = $datos->row()->nombre.' '.$datos->row()->apellido_pa.' '.$datos->row()->apellido_ma;            // Seguridad minima            $mensaje = nl2br(strip_tags($mensaje));                        $respuesta = $this->resgitro_library->enviar_contactar($correo, $nombre_completo, $mensaje);            $data['mensaje'] = 'Problemas el enviar el correo reintente más tarde';            if($respuesta === true){                $data['mensaje'] = 'Correo enviado correctamente';            }            echo json_encode($data);                    } else {          redirect('registro');        }    }    //--------------------------------------------------------------------------          /**     * Contenido de ediitar     */    function participante_egeneral($id){        $data['id'] = $id;        $datos = $this->Registro_model->info_participantes($id);                  //Reglas de validacion de los campos        $campos = $this->Registro_model->campos();        if ($campos->num_rows() > 0) {            foreach ($campos->result() as $row) {                $reglas = 'trim';                //Regla de requerido                if ($row->visible === '1' && $row->requerido === '1') {                    $reglas = '|required';                }                //Otras Reglas                switch ($row->nombre) {                    case 'correo': $reglas .= '|valid_email'; break;                    default: break;                }                $this->form_validation->set_rules($row->nombre, $row->etiqueta, $reglas);            }        }        if ($this->form_validation->run() == FALSE) {            //Se entra en modo edicion            $a = FALSE;            $data['texto_boton'] = 'Editar';                        $arr = array ("a"=>$a);            $data['campos'] = $this->_campos($campos);            $data['valores'] = $datos->row_array();                        $data['precio'] = '';                        $data['selec_anfitriones'] = $this->Registro_model->anfitriones(FALSE, '0');            $data['selec_estados'] = $this->Registro_model->estados();            $data['selec_paises'] = $this->Registro_model->paises();            $data['js_datos'] = json_encode($arr);             $data['jscript'] = array ('js/paso2.js');            $data['main_content'] = 'registro/paso2';            $this->load->view(config_item('template') . 'main', $data);        } else {            $var = $this->Registro_model->editar_participante_general($id);              if($var){                redirect('administracion/participantes');            } else {                echo 'Fatal Error';            }                    }              }    //--------------------------------------------------------------------------          /**     * Zona Publica     * seleccionar conferencias     */    function participante_econfere($id) {        $conferencias_query = $this->Registro_model->conferencias();        $salones = $this->_titulos($conferencias_query->result_array(), 'nombre_salon');        $horarios = $this->_titulos($conferencias_query->result_array(), 'hora_inicio');         foreach ($horarios as $key_horarios => $value_horarios) {            $this->form_validation->set_rules('id'.$key_horarios, 'Conferencia', 'required');         }                if ($this->form_validation->run() == FALSE) {            $conferencias_query = $this->Registro_model->conferencias();            $salones = $this->_titulos($conferencias_query->result_array(), 'nombre_salon');                            $datos = $this->Registro_model->info_participantes_conf($id);            $data['texto_boton'] = 'Editar';                        $data['capacidad'] =  $this->Registro_model->conferencias_inscritos();            $data['salones'] = $salones;            $id_s = array();            foreach ($datos->result() as $row)            {                $id_s[] = $row->id_conferencia;            }                                    $data['valores'] = $id_s;            $data['horarios'] = $horarios;            $data['todo'] = $conferencias_query->result_array();            $data['main_content'] = 'registro/paso2a';            $this->load->view(config_item('template') . 'main', $data);        }else{            $var = $this->Registro_model->editar_participante_confere($id);              if($var){                redirect('administracion/participantes');            } else {                echo 'Fatal Error';            }        }    }    //--------------------------------------------------------------------------        /**     * Zona Publica     * seleccionar la forma de pago y Datos de Facturacion     */    function participante_epago($id) {        $check_factura = FALSE;                $this->form_validation->set_rules('pago', 'Tipo', '');        $this->form_validation->set_rules('factura', 'Cupon', '');        //Si es Con factura        if ($this->input->post('factura') === '1') {            $check_factura = TRUE;            $this->form_validation->set_rules('razon_social', 'Razon social', 'required');            $this->form_validation->set_rules('direccion', 'Dirección', '');            $this->form_validation->set_rules('colonia', 'Colonia', '');            $this->form_validation->set_rules('ciudad', 'Ciudad', '');            $this->form_validation->set_rules('id_estado', 'Estado', '');            $this->form_validation->set_rules('codigo_postal', 'C. Postal', '');            $this->form_validation->set_rules('rfc', 'Rfc', 'required|callback__valida_rfc');        }        if ($this->form_validation->run() == FALSE) {            $pago_query = $this->Registro_model->info_participantes_pago($id);                        $data['texto_boton'] = 'Editar';            if($pago_query->row()->factura === '1'){                $check_factura = TRUE;            }                        //Traer los datos del la info general v2.0            $a = 'Empresa';            $b = 'Direccion';            $c = 'Colonia';            $d = 'Ciudad';            $e = '19';            $f = 'Codigo_postal';            $g = $check_factura;                        $arr = array ("a"=>$a,"b"=>$b,"c"=>$c,"d"=>$d,"e"=>$e,"f"=>$f,"g"=>$g);                        $data['js_datos'] = json_encode($arr);                     $data['valores'] = $pago_query->row_array();            $data['selec_estados'] = $this->Registro_model->estados();                    $data['jscript'] = array('js/paso3.js');            $data['main_content'] = 'registro/paso3';            $this->load->view(config_item('template') . 'main', $data);        } else {            $var = $this->Registro_model->editar_participante_pago($id);              if($var){                redirect('administracion/participantes');            } else {                echo 'Fatal Error';            }        }    }    //--------------------------------------------------------------------------    /**     * Valida RFC     */    function _valida_rfc($rfc) {        $exp = '/^[a-zA-Z]{3,4}[ \-]?[0-9]{2}((0{1}[1-9]{1})|(1{1}[0-2]{1}))((0{1}[1-9]{1})|([1-2]{1}[0-9]{1})|(3{1}[0-1]{1}))[ \-]?[a-zA-Z0-9]{3}$/D';        if (preg_match($exp, $rfc)){             return TRUE;        }        $this->form_validation->set_message('_valida_rfc', 'RFC invalido');        return FALSE;    }        //--------------------------------------------------------------------------        /**     * Gener al Gafet en HTML     */    function participante_gafete($id){        $this->load->library('barcode');        $datos = $this->Registro_model->info_participantes($id);         $codigo = $datos->row()->codigo_barras;                $data['multi'] = FALSE;        if($this->evento->multi_conferencia === '1'){            $data['multi'] = TRUE;            $data['conferencias'] = $this->Registro_model->conferencias_participante($id);          }                $data['datos'] = $datos;         $data['id_code'] = $codigo;        $data['codigo'] = $this->barcode->genera_codigo( $codigo );        $this->load->view('administracion/ajax/participante_gafete', $data);    }    //--------------------------------------------------------------------------         /**     * alternativa en PDF para el Gafet     *           */    function participante_gafetePDF($id){        $this->load->library('librerias');        $this->load->library('barcode');                $id_code = str_pad(substr($id, -5), 5, "EVEN", STR_PAD_LEFT);                $data['codigo'] = $this->barcode->genera_codigo( $id_code );        $data['datos'] = $this->Registro_model->info_participantes($id);          $data['conferencias'] = $this->Registro_model->conferencias_participante($id);                  $html = $this->load->view('administracion/pdf/participante_gafete',$data,TRUE);        $tamanio = array(100,260);                $this->librerias->pdf($html,"gafete",$tamanio);        }    //--------------------------------------------------------------------------      /**     * Marcasion de de la asitencia     *      */    function asistencia() {        $data['asis'] = 'active';        $data['jscript'] = array ('js/asistencia.js');        $data['main_content'] = 'administracion/asistencia';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------      /**     * LLEnado de la tabla para participantes o index     */    function asistencia_tabla(){      if($this->input->is_ajax_request()){          /**           * Esperar la validacion de pagado para imprimir gafete           * Cuando el sisitem aasepte pagos           *            */          $buscar = $this->input->post('buscar');                    $data['contar'] = 0;          $data['tabla'] = $this->Registro_model->participantes_lista($buscar, FALSE, FALSE, FALSE, $buscar);            $this->load->view('administracion/ajax/asistencia_tabla', $data);      } else {          redirect('registro');      }    }        //--------------------------------------------------------------------------      /**     * marca en la base de datso la asistencia     */    function asistencia_marcar(){        if($this->input->is_ajax_request()){            $id = $this->input->post('id');            $result = $this->Registro_model->asistencia($id);              if ($result) {                echo '1';            }else{                echo '0';            }        } else {          redirect('registro');        }    }        //--------------------------------------------------------------------------      /**     * Listado de todos los cupones     *      */    function cupones() {        // Para que form_validator pueda validar el Get        $_POST = $_GET;        		$this->form_validation->set_rules('buscar', 'Buscar', '');        $this->form_validation->run();                $data['jscript'] = array ('js/gpo_cupones.js');                $data['cupo'] = 'active';        $data['main_content'] = 'administracion/cupones';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------      /**     * LLEnado de la tabla para participantes o index     */    function cupones_tabla(){      if($this->input->is_ajax_request()){          //          $pagina = $this->input->post('pagina');//          $porPagina = $this->input->post('porPagina');//          $inicio = ($pagina*$porPagina)-$porPagina;          $buscar = $this->input->post('buscar');                   $data['contar'] = 0;          $data['tabla'] = $this->Registro_model->cupones_gpo_info($buscar);            $this->load->view('administracion/ajax/cupones_tabla', $data);      } else {          redirect('registro');      }    }    //--------------------------------------------------------------------------          /**     * LLEnado de la tabla para participantes o index     */    function cupones_gpos($id = NULL, $nombre = NULL) {        $id = urldecode($id);        $data = array();        $nombre = urldecode($nombre);        if ($this->input->is_ajax_request()) {            $metodo = $this->_detect_method();            switch ($metodo) {                case "get":                    //Leer                    echo "No";                    break;                case "post":                    //Crear                    $id = $this->Registro_model->cupones_gpo_nuevo($nombre);                    $data['id'] = $id;                    $data['nombre'] = $nombre;                    $data['contar'] = 0;                    $data['html'] = $this->load->view('administracion/ajax/cupones_fila', $data, TRUE);                                        echo json_encode($data);                    break;                case "put":                    //Editar                    $respuesta = $this->Registro_model->cupones_gpo_editar($id, $nombre);                    $data['estatus'] = $respuesta;                                        echo json_encode($data);                    break;                case "delete":                    //Eliminar                    $respuesta = $this->Registro_model->cupones_gpo_eliminar($id);                    $data['estatus'] = $respuesta;                                        echo json_encode($data);                    break;            }        } else {            redirect('registro');        }    }    //--------------------------------------------------------------------------              /**     * Codigos de un cupon determinado     *      */    function cupon($grupo) {        $cupones_gpo = $this->Registro_model->cupones_gpo_info(FALSE ,$grupo);  		$this->form_validation->set_rules('tipo', 'Tipo', 'required');		$this->form_validation->set_rules('numero', 'Tipo', 'integer');		$this->form_validation->set_rules('precio', 'Tipo', 'required|numeric');                if ($this->form_validation->run() == FALSE) {                    } else {            $tipo = $this->input->post('tipo');            $numero = $this->input->post('numero');            $codigo = $this->input->post('codigo');            $repeticiones = $this->input->post('repeticiones');            $precio = $this->input->post('precio');             if($tipo === 'unitario'){                $numero = false;            } else if($tipo === 'serie'){                $codigo = false;            }                        $this->Registro_model->cupon_cupones_insertar($grupo, $codigo, $numero, $precio, $repeticiones);         }                $data['grupo'] = $grupo;        $data['cupo'] = 'active';        $data['contar'] = 0;        $data['jscript'] = array ('js/cupon.js');        $data['tabla'] = $this->Registro_model->cupon_cupones_lista($grupo);         $data['nombre_cupones_gpo'] = $cupones_gpo->row()->nombre_cupones_gpo ;        $data['main_content'] = 'administracion/cupon';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------        /*     * Listado de Cupones por grupo     */    function cupon_listado($grupo) {        $cupones_gpo = $this->Registro_model->cupones_gpo_info(FALSE ,$grupo);                  $data['cupo'] = 'active';        $data['nombre_cupones_gpo'] = $cupones_gpo->row()->nombre_cupones_gpo ;        $data['tabla'] = $this->Registro_model->cupon_cupones_lista($grupo);         $data['main_content'] = 'administracion/ajax/cupon_listado';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------        /**     * Listado de todos los cupones     *      */    function presparticipantes() {        $data['links'] = array ('css/paginator.css');         $data['jscript'] = array ('js/vendor/jquery.ui.touch-punch.min.js',            'js/vendor/jquery.pagination.js',            'js/presparticipantes.js');        $data['pres'] = 'active';        $data['main_content'] = 'administracion/presparticipantes';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------      /**     * Zona Publica     * Resumen de todo     */    function editar($id) {        //consulta para obtener todos los datos                $prosedimiento = $this->_secuencia('paso1', TRUE);        //id tipo 2 es invitado        if($prosedimiento['datos_paso1']['id_tipo'] === '2'){            $tipoNuevo = true;            $requerido = '';            $requerido_tipo1 ='required';        }else {            $tipoNuevo = false;            $requerido = 'required';            $requerido_tipo1 ='';        }        $data['tipoNuevo'] = $tipoNuevo;        $data['datos_paso2'] = $prosedimiento['datos_paso2'];        $data['datos_paso2a'] = $prosedimiento['datos_paso2a'];        $data['anfitrion'] = $this->Registro_model->anfitriones($prosedimiento['datos_paso2']['id_anfitrion'])->row()->nombre_anfitrion;        $data['conferencias'] = $conferencias_query = $this->Registro_model->conferencias();               //Prepara para el envio        $prosedimiento['paso4'] = TRUE;        $this->input->set_cookie('info', serialize($prosedimiento), 0);        $data['main_content'] = 'registro/paso4';        $this->load->view(config_item('template') . 'main', $data);    }            /**     * Zona Publica     * seleccionar conferencias     */    function conferencias($edicion = FALSE) {        $conferencias_query = $this->Registro_model->conferencias();        $salones = $this->_titulos($conferencias_query->result_array(), 'nombre_salon');        $horarios = $this->_titulos($conferencias_query->result_array(), 'hora_inicio');                    $data['conf'] = 'active';        $data['capacidad'] =  $this->Registro_model->conferencias_asistencia();        $data['salones'] = $salones;        $data['horarios'] = $horarios;        $data['todo'] = $conferencias_query->result_array();        $data['main_content'] = 'administracion/conferencias';        $this->load->view(config_item('template') . 'main', $data);    }    //--------------------------------------------------------------------------        /**     * Obteine valore sunicos de un array para procesarlos como titulos     *      */    function _titulos($array, $etiqueta) {        $titulos = array();        foreach ($array as $key => $value) {            $titulos[] = $value[$etiqueta];        }        return array_unique($titulos);    }        //--------------------------------------------------------------------------    /**     * Obteine valore sunicos de un array para procesarlos como titulos     *      */    function _campos($objeto) {        $campos = new stdClass();        if ($objeto->num_rows() > 0) {            foreach ($objeto->result() as $row) {                $campos_par = new stdClass();                $campos_par->etiqueta = $row->etiqueta;                $campos_par->visible = $row->visible;                $campos_par->requerido = $row->requerido;                $nombre = $row->nombre;                $campos->$nombre = $campos_par;            }        }        return $campos;    }    //--------------------------------------------------------------------------    protected function _detect_method() {        $method = strtolower($this->input->server('REQUEST_METHOD'));        if ($this->config->item('enable_emulate_request')) {            if ($this->input->post('_method')) {                $method = strtolower($this->input->post('_method'));            } else if ($this->input->server('HTTP_X_HTTP_METHOD_OVERRIDE')) {                $method = strtolower($this->input->server('HTTP_X_HTTP_METHOD_OVERRIDE'));            }        }        if (in_array($method, array('get', 'delete', 'post', 'put'))) {            return $method;        }        return 'get';    }}/* End of file administracion.php *//* Location: ./application/controllers/administracion.php */